

def is_grid_safe(grid, num, cell):
    if 0 <= cell[0] < 3 and 0 <= cell[1] < 3:# grid 1
        for x in range(0, 3):
            for y in range(0, 3):
                if grid[x][y] == num:
                    return False
    elif 0 <= cell[0] < 3 and 3 <= cell[1] < 6:
        for x in range(0, 3):
            for y in range(3, 6):
                if grid[x][y] == num:
                    return False
    elif 0 <= cell[0] < 3 and 6 <= cell[1] < 9:
        for x in range(0, 3):
            for y in range(6, 9):
                if grid[x][y] == num:
                    return False
    elif 3 <= cell[0] < 6 and 0 <= cell[1] < 3:# grid 2
        for x in range(3, 6):
            for y in range(0, 3):
                if grid[x][y] == num:
                    return False
    elif 3 <= cell[0] < 6 and 3 <= cell[1] < 6:
        for x in range(3, 6):
            for y in range(3, 6):
                if grid[x][y] == num:
                    return False
    elif 3 <= cell[0] < 6 and 6 <= cell[1] < 9:
        for x in range(3, 6):
            for y in range(6, 9):
                if grid[x][y] == num:
                    return False
    elif 6 <= cell[0] < 9 and 0 <= cell[1] < 3:# grid 3
        for x in range(6, 9):
            for y in range(0, 3):
                if grid[x][y] == num:
                    return False
    elif 6 <= cell[0] < 9 and 3 <= cell[1] < 6:
        for x in range(6, 9):
            for y in range(3, 6):
                if grid[x][y] == num:
                    return False
    elif 6 <= cell[0] < 9 and 6 <= cell[1] < 9:
        for x in range(6, 9):
            for y in range(6, 9):
                if grid[x][y] == num:
                    return False
    return True


def is_row_safe(grid, num, cell):
    for i in range(9):
        if grid[cell[0]][i] == num:
            return False
    return True


def is_col_safe(grid, num, cell):
    for i in range(9):
        if grid[i][cell[1]] == num:
            return False
    return True


def is_safe(grid, num, cell):
    if is_grid_safe(grid, num, cell) and is_row_safe(grid, num, cell) and is_col_safe(grid, num, cell):
        return True
    return False


def find_next_empty_cell(grid):
    for i in range(9):
        for j in range(9):
            if grid[i][j] == 0:
                return i, j
    return None


def sudoku_solver(grid):
    cell = cell = find_next_empty_cell(grid)
    if cell is None:
        return True

    for i in range(1, 10):
        if is_safe(grid, i, cell):
            grid[cell[0]][cell[1]] = i
            if sudoku_solver(grid):
                return True
            grid[cell[0]][cell[1]] = 0

    return False


def solve(grid):

    if sudoku_solver(grid):
        for i in range(9):
            print(grid[i])
    else:
        print("No Solution")


def main():
    grid = [[0 for _ in range(9)] for _ in range(9)]

    grid = [[3, 0, 6, 5, 0, 8, 4, 0, 0],
            [5, 2, 0, 0, 0, 0, 0, 0, 0],
            [0, 8, 7, 0, 0, 0, 0, 3, 1],
            [0, 0, 3, 0, 1, 0, 0, 8, 0],
            [9, 0, 0, 8, 6, 3, 0, 0, 5],
            [0, 5, 0, 0, 9, 0, 6, 0, 0],
            [1, 3, 0, 0, 0, 0, 2, 5, 0],
            [0, 0, 0, 0, 0, 0, 0, 7, 4],
            [0, 0, 5, 2, 0, 6, 3, 0, 0]]

    solve(grid)


if __name__ == "__main__":
    main()